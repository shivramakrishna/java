// Generated by CoffeeScript 1.12.7
(function() {
  var Caf, defineModule, describe, log, ref, ref1, test;

  ref = require("art-standard-lib"), defineModule = ref.defineModule, log = ref.log;

  ref1 = require("art-testbench"), describe = ref1.describe, test = ref1.test;

  Caf = require("../../");

  test("importInvoke basic", function() {
    return assert.eq(Caf.importInvoke(["foo"], [
      {
        foo: 123
      }
    ], function(foo) {
      return {
        foo: foo
      };
    }), {
      foo: 123
    });
  });

  test("imports only requested", function() {
    return assert.eq(Caf.importInvoke(["foo"], [
      {
        foo: 123,
        bar: 456
      }
    ], function(foo) {
      return {
        foo: foo
      };
    }), {
      foo: 123
    });
  });

  test("importInvoke two", function() {
    return assert.eq(Caf.importInvoke(["foo", "bar"], [
      {
        foo: 123,
        bar: 456
      }
    ], function(foo, bar) {
      return {
        foo: foo,
        bar: bar
      };
    }), {
      foo: 123,
      bar: 456
    });
  });

  test("importInvoke miss", function() {
    return assert.rejects(function() {
      return Caf.importInvoke(["foo", "bar"], [
        {
          foo: 123
        }
      ]);
    });
  });

  test("importInvoke last has priority", function() {
    return assert.eq(Caf.importInvoke(["foo"], [
      {
        foo: 123
      }, {
        foo: 456
      }
    ], function(foo) {
      return {
        foo: foo
      };
    }), {
      foo: 456
    });
  });

  test("importInvoke - global has last has priority", function() {
    return assert.eq(Caf.importInvoke(["Math"], [
      {
        Math: 123
      }
    ], function(Math) {
      return {
        Math: Math
      };
    }), {
      Math: 123
    });
  });

}).call(this);
