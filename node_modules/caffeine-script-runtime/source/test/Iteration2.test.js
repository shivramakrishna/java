// Generated by CoffeeScript 1.12.7
(function() {
  var Caf, array123, defineModule, describe, log, objectAbc, ref, ref1, test;

  ref = require("art-standard-lib"), defineModule = ref.defineModule, log = ref.log;

  ref1 = require("art-testbench"), describe = ref1.describe, test = ref1.test;

  Caf = require("../../");

  array123 = [1, 2, 3];

  objectAbc = {
    a: 1,
    b: 2,
    c: 3
  };

  describe({
    each2: function() {
      test("array123/objectAbc: each2 ...", function() {
        assert.same(array123, Caf.each2(array123));
        return assert.same(objectAbc, Caf.each2(objectAbc));
      });
      test("array123/objectAbc: each2 v from ... do count += v", function() {
        var count;
        count = 0;
        assert.same(array123, Caf.each2(array123, function(v) {
          return count += v;
        }));
        assert.eq(count, 6);
        count = 0;
        assert.same(objectAbc, Caf.each2(objectAbc, function(v) {
          return count += v;
        }));
        return assert.eq(count, 6);
      });
      return test("array123/objectAbc: each2 ... into 123", function() {
        assert.eq(123, Caf.each2(array123, null, null, 123));
        return assert.eq(123, Caf.each2(objectAbc, null, null, 123));
      });
    },
    array: function() {
      test("array [] 1 2 3", function() {
        var bar;
        bar = Caf.array(array123);
        assert.notSame(array123, bar);
        return assert.eq(array123, bar);
      });
      test("array a: 1, b: 2, c: 3", function() {
        return assert.eq([1, 2, 3], Caf.array(objectAbc));
      });
      test("array v, k from a: 1 b: 2 c: 3 with k", function() {
        var bar;
        bar = Caf.array(objectAbc, function(v, k) {
          return k;
        });
        return assert.eq(bar, ["a", "b", "c"]);
      });
      test("array v, k from [1, 2, 3] with k", function() {
        var bar;
        bar = Caf.array(array123, function(v, k) {
          return k;
        });
        return assert.eq(bar, [0, 1, 2]);
      });
      test("array123/objectAbc: array a from ... with a * 2", function() {
        var a, expected;
        expected = (function() {
          var i, len, results;
          results = [];
          for (i = 0, len = array123.length; i < len; i++) {
            a = array123[i];
            results.push(a * 2);
          }
          return results;
        })();
        assert.eq(expected, Caf.array(array123, function(a) {
          return a * 2;
        }));
        return assert.eq(expected, Caf.array(objectAbc, function(a) {
          return a * 2;
        }));
      });
      test("array123/objectAbc: array ... into [] 4 5 6", function() {
        var expected, into;
        expected = [4, 5, 6, 1, 2, 3];
        assert.same(into = [4, 5, 6], Caf.array(array123, null, null, into));
        assert.eq(expected, Caf.array(array123, null, null, [4, 5, 6]));
        return assert.eq(expected, Caf.array(objectAbc, null, null, [4, 5, 6]));
      });
      test("array123/objectAbc: array a from ... when a % 2 > 0", function() {
        var expected;
        expected = [1, 3];
        assert.eq(expected, Caf.array(array123, null, function(a) {
          return a % 2 > 0;
        }));
        return assert.eq(expected, Caf.array(objectAbc, null, function(a) {
          return a % 2 > 0;
        }));
      });
      return test("array123/objectAbc: array v, k from ... with v", function() {
        var expected;
        expected = [1, 2, 3];
        assert.eq(expected, Caf.array(array123, function(v, k) {
          return v;
        }));
        return assert.eq(expected, Caf.array(objectAbc, function(v, k) {
          return v;
        }));
      });
    },
    object: function() {
      test("object [] 1 2 3", function() {
        return assert.eq({
          1: 1,
          2: 2,
          3: 3
        }, Caf.object(array123));
      });
      test("object a: 1, b: 2, c: 3", function() {
        assert.notSame(objectAbc, Caf.object(objectAbc));
        return assert.eq(objectAbc, Caf.object(objectAbc));
      });
      test("object v, k from a: 1, b: 2, c: 3 with-key k + k", function() {
        return assert.eq({
          aa: 1,
          bb: 2,
          cc: 3
        }, Caf.object(objectAbc, null, null, null, function(v, k) {
          return k + k;
        }));
      });
      test("object v, k from [1, 2, 3] with-key :a + k", function() {
        return assert.eq({
          a0: 1,
          a1: 2,
          a2: 3
        }, Caf.object(array123, null, null, null, function(v, k) {
          return "a" + k;
        }));
      });
      test("object v, k from a: 1 b: 2 c: 3 with k", function() {
        return assert.eq({
          a: "a",
          b: "b",
          c: "c"
        }, Caf.object(objectAbc, function(v, k) {
          return k;
        }));
      });
      test("object v, k from [1, 2, 3] with k", function() {
        return assert.eq({
          1: 0,
          2: 1,
          3: 2
        }, Caf.object(array123, function(v, k) {
          return k;
        }));
      });
      test("array123/objectAbc: object a from ... with a * 2", function() {
        assert.eq({
          1: 2,
          2: 4,
          3: 6
        }, Caf.object(array123, function(a) {
          return a * 2;
        }));
        return assert.eq({
          a: 2,
          b: 4,
          c: 6
        }, Caf.object(objectAbc, function(a) {
          return a * 2;
        }));
      });
      test("array123/objectAbc: object ... into d:4, e:5, f:6", function() {
        var into;
        assert.same(into = {
          d: 4,
          e: 5,
          f: 6
        }, Caf.object(array123, null, null, into));
        assert.eq({
          d: 4,
          e: 5,
          f: 6,
          1: 1,
          2: 2,
          3: 3
        }, Caf.object(array123, null, null, {
          d: 4,
          e: 5,
          f: 6
        }));
        return assert.eq({
          d: 4,
          e: 5,
          f: 6,
          a: 1,
          b: 2,
          c: 3
        }, Caf.object(objectAbc, null, null, {
          d: 4,
          e: 5,
          f: 6
        }));
      });
      test("array123/objectAbc: object a from ... when a % 2 > 0", function() {
        assert.eq({
          1: 1,
          3: 3
        }, Caf.object(array123, null, function(a) {
          return a % 2 > 0;
        }));
        return assert.eq({
          a: 1,
          c: 3
        }, Caf.object(objectAbc, null, function(a) {
          return a % 2 > 0;
        }));
      });
      return test("array123/objectAbc: object v, k from ... with v", function() {
        assert.eq({
          1: 1,
          2: 2,
          3: 3
        }, Caf.object(array123, function(v, k) {
          return v;
        }));
        return assert.eq({
          a: 1,
          b: 2,
          c: 3
        }, Caf.object(objectAbc, function(v, k) {
          return v;
        }));
      });
    },
    find: function() {
      test("array123/objectAbc: find v in ... with v == 2 && k", function() {
        assert.eq(1, Caf.find(array123, function(v, k) {
          return v === 2 && k;
        }));
        return assert.eq("b", Caf.find(objectAbc, function(v, k) {
          return v === 2 && k;
        }));
      });
      test("array123/objectAbc: find v in ... when v == 2", function() {
        assert.eq(2, Caf.find(array123, null, function(v) {
          return v === 2;
        }));
        return assert.eq(2, Caf.find(objectAbc, null, function(v) {
          return v === 2;
        }));
      });
      test("array123/objectAbc: find v, k in ... when v == 2 with k", function() {
        assert.eq(1, Caf.find(array123, (function(v, k) {
          return k;
        }), function(v) {
          return v === 2;
        }));
        return assert.eq("b", Caf.find(objectAbc, (function(v, k) {
          return k;
        }), function(v) {
          return v === 2;
        }));
      });
      return test("find [] null 2 3", function() {
        return assert.eq(2, Caf.find([null, 2, 3]));
      });
    },
    reduce: function() {
      test("reduce a, v from [1, 2, 3] with a + v", function() {
        return assert.eq(6, Caf.reduce([1, 2, 3], function(a, v) {
          return a + v;
        }));
      });
      test("reduce a, v from [1, 2, 3, 4, 5] with a + v when v % 2 == 0", function() {
        return assert.eq(6, Caf.reduce([1, 2, 3, 4, 5], (function(a, v) {
          return a + v;
        }), function(a, v) {
          return (v % 2) === 0;
        }));
      });
      test("reduce a, v from [] with a + v", function() {
        return assert.eq(void 0, Caf.reduce([], function(a, v) {
          return a + v;
        }));
      });
      test("reduce a, v from [] with a + v inject 0", function() {
        return assert.eq(0, Caf.reduce([], (function(a, v) {
          return a + v;
        }), null, 0));
      });
      test("reduce a, v from [1] with a + v", function() {
        return assert.eq(1, Caf.reduce([1], function(a, v) {
          return a + v;
        }));
      });
      test("reduce a, v from [undefined, 1, 2, 3] with a + v", function() {
        return assert.eq(6, Caf.reduce([void 0, 1, 2, 3], function(a, v) {
          return a + v;
        }));
      });
      test("reduce a, v from [1, undefined, 2, 3] with a + v", function() {
        return assert.eq(6, Caf.reduce([1, void 0, 2, 3], function(a, v) {
          return a + v;
        }));
      });
      test("reduce a, v from [1, 2, 3, undefined] with a + v", function() {
        return assert.eq(6, Caf.reduce([1, 2, 3, void 0], function(a, v) {
          return a + v;
        }));
      });
      return test("reduce a, v, k", function() {
        return assert.eq(222, Caf.reduce({
          no1: .5,
          yes1: 2,
          yes2: 200,
          yes3: 20,
          no2: .25
        }, function(a, v) {
          return a + v;
        }, function(a, v, k) {
          return /yes/.test(k);
        }));
      });
    }
  });

}).call(this);
