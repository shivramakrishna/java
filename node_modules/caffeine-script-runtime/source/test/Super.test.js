// Generated by CoffeeScript 1.12.7
(function() {
  var BaseClass, Caf, defineModule, describe, log, ref, ref1, test,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  ref = require("art-standard-lib"), defineModule = ref.defineModule, log = ref.log;

  BaseClass = require('art-class-system').BaseClass;

  ref1 = require("art-testbench"), describe = ref1.describe, test = ref1.test;

  Caf = require("../../");

  describe({
    "coffeeScript classes": function() {
      var Bar, Baz, Foo;
      Foo = (function(superClass) {
        extend(Foo, superClass);

        function Foo() {
          return Foo.__super__.constructor.apply(this, arguments);
        }

        return Foo;

      })(BaseClass);
      Bar = (function(superClass) {
        extend(Bar, superClass);

        function Bar() {
          return Bar.__super__.constructor.apply(this, arguments);
        }

        return Bar;

      })(Foo);
      Baz = (function(superClass) {
        extend(Baz, superClass);

        function Baz() {
          return Baz.__super__.constructor.apply(this, arguments);
        }

        return Baz;

      })(Bar);
      test("getSuper extended class object", function() {
        return assert.eq(Caf.getSuper(Bar), Foo);
      });
      test("getSuper 2x extended class object", function() {
        return assert.eq(Caf.getSuper(Baz), Bar);
      });
      return test("getSuper extended class instance", function() {
        return assert.eq(Caf.getSuper(new Bar), Foo.prototype);
      });
    },
    "es6 classes": function() {
      class Foo extends BaseClass {};;
      class Bar extends Foo {};;
      class Baz extends Bar {};;
      test("getSuper extended class object", function() {
        return assert.eq(Caf.getSuper(Bar), Foo);
      });
      test("getSuper 2x extended class object", function() {
        return assert.eq(Caf.getSuper(Baz), Bar);
      });
      return test("getSuper extended class instance", function() {
        return assert.eq(Caf.getSuper(new Bar), Foo.prototype);
      });
    }
  });

}).call(this);
